version: "3.8"
services:
  postgres:
    image: postgres:latest   # Use the latest version of PostgreSQL
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: postgres_ecommerce
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ecommerce_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - ecommerce_net

  product-service:
    build:
      context: .
      dockerfile: services/product-service/Dockerfile
    ports:
      - "50052:50052"
      - "8082:8082"
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    volumes:
    - .env:/app/.env
    environment:
      - PRODUCT_SERVICE_ADDR=product-service:50052
    networks:
      - ecommerce_net

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    networks:
      - ecommerce_net

  kafka:
    image: bitnami/kafka:3.9
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    networks:
      - ecommerce_net
    volumes:
      - /tmp/broker-metadata:/opt/bitnami/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  inventory-service:
    build:
      context: .
      dockerfile: services/inventory-service/Dockerfile
    ports:
      - "50053:50053"
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_started
    restart: on-failure
    env_file:
      - .env
    volumes:
      - .env:/app/.env
    networks:
      - ecommerce_net

  order-service:
    build:
      context: .
      dockerfile: services/order-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
    ports:
      - "8081:8081"     # HTTP for REST
    env_file:
      - .env
    volumes:
      - .env:/app/.env
    networks:
      - ecommerce_net

  payment-service:
    build:
      context: .
      dockerfile: services/payment-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
    ports:
      - "8084:8084"  # Adjust if you're using gRPC too (e.g., "50054:50054")
    env_file:
      - .env
    volumes:
      - .env:/app/.env
    networks:
      - ecommerce_net
  
  notification-service:
    build:
      context: .
      dockerfile: services/notification-service/Dockerfile
    ports:
      - "8086:8086"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    volumes:
      - .env:/app/.env
    networks:
      - ecommerce_net



  redis:
    image: redis:7
    container_name: product-redis
    ports:
      - "6379:6379"
    networks:
      - ecommerce_net


  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - .env:/app/.env  
    networks:
      - ecommerce_net



volumes:
  pgdata:   # âœ… This was missing before!

networks:
  ecommerce_net:
    driver: bridge
